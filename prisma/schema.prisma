generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role{
  USER
  ADMIN
  SELLER
}

model User{
  id String @id @default(uuid())
  name String
  email String @unique
  picture String @db.Text
  role Role @default(USER)

  stores            Store[]           @relation("UserStores")
  following         Store[]           @relation("UserFollowingStore")
  reviews           Review[]          @relation("ReviewToUser")
  cart              Cart?             @relation("UserCart")
  shippingAddresses ShippingAddress[] @relation("UserShippingAddresses")
  orders            Order[]           @relation("UserOrders")
  wishlist          Wishlist[]        @relation("WishlistToUser")
  payments PaymentDetails[]  @relation("PaymentDetailsToUser")
  coupons Coupon[]  @relation("CouponToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[] @relation("CategoryToSubcategory")

  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  categoryId String
  category   Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  products Product[] @relation("SubCategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                                  String      @id @default(uuid())
  name                                String
  description                         String      @db.Text
  email                               String      @unique
  phone                               String
  url                                 String      @unique
  logo                                String
  cover                               String
  status                              StoreStatus @default(PENDING)
  averageRating                       Float       @default(0)
  numReviews                          Int       @default(0)
  featured                            Boolean     @default(false)
  returnPolicy                        String      @default("Return in 30 days.")
  defaultShippingService              String      @default("International Delivery")
  defaultShippingFeePerItem           Float       @default(0)
  defaultShippingFeeForAdditionalItem Float       @default(0)
  defaultShippingFeePerKg             Float       @default(0)
  defaultShippingFeeFixed             Float       @default(0)
  defaultDeliveryTimeMin              Int         @default(7)
  defaultDeliveryTimeMax              Int         @default(31)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  user   User   @relation("UserStores", fields: [userId], references: [id])

  products      Product[]      @relation("StoreToProduct")
  shippingRates ShippingRate[] @relation("StoreShippingRates")
  followers     User[]         @relation("UserFollowingStore")
  cartItems     CartItem[]     @relation("CartItemToStore")
  orderGroups   OrderGroup[]   @relation("OrderGroupToStore")
  coupons Coupon[] @relation("CouponToStore")

  @@index([userId])
}

enum ShippingFeeMethod {
  ITEM
  WEIGHT
  FIXED
}

model Product {
  id                String            @id @default(uuid())
  name              String
  description       String            @db.LongText
  slug              String            @unique
  brand             String
  rating            Float             @default(0)
  sales             Int               @default(0)
  numReviews        Int               @default(0)
  shippingFeeMethod ShippingFeeMethod @default(ITEM)
  views  Int @default(0)
  freeShipping FreeShipping? @relation("ProductFreeShipping")
  freeShippingForAllCountries Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  variants  ProductVariant[] @relation("ProductToProductVariant")
  specs     Spec[]           @relation("ProductSpec")
  questions Question[]       @relation("ProductQuestion")
  reviews   Review[]         @relation("ReviewToProduct")
  wishlist  Wishlist[]       @relation("WishlistToProduct")

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])

  offerTagId String?
  offerTag   OfferTag? @relation("OfferTagToProduct", fields: [offerTagId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([offerTagId])
}

model ProductVariant {
  id                 String  @id @default(uuid())
  variantName        String
  variantDescription String? @db.LongText
  variantImage       String
  slug               String  @unique
  isSale             Boolean @default(false)
  saleEndDate        String?
  sku                String
  keywords           String
  sales              Int     @default(0)
  weight             Float

  productId String
  product   Product @relation("ProductToProductVariant", fields: [productId], references: [id])

  sizes    Size[]                @relation("ProductVariantSizes")
  images   ProductVariantImage[] @relation("ProductVariantToVariantImage")
  colors   Color[]               @relation("ProductVariantColors")
  specs    Spec[]                @relation("ProductVariantSpec")
  wishlist Wishlist[]            @relation("WishlistToProductVariant")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int
  price    Float
  discount Float  @default(0)

  wishlist Wishlist[] @relation("WishlistToSize")

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantSizes", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  order Int?

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToVariantImage", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model Color {
  id   String @id @default(uuid())
  name String

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantColors", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model OfferTag {
  id   String @id @default(uuid())
  name String
  url  String  @unique

  products Product[] @relation("OfferTagToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Spec {
  id    String @id @default(uuid())
  name  String
  value String

  productId String?
  product   Product? @relation("ProductSpec", fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation("ProductVariantSpec", fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Question {
  id String @id @default(uuid())

  question String
  answer   String

  productId String
  product   Product @relation("ProductQuestion", fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  code String @unique

  shippingRates         ShippingRate[]        @relation("CountryShippingRates")
  freeShippingCountries FreeShippingCountry[] @relation("FreeShippingToCountry")
  shippingAddresses     ShippingAddress[]     @relation("CountryToShippingAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShippingRate {
  id String @id @default(uuid())

  shippingService              String
  shippingFeePerItem           Float
  shippingFeeForAdditionalItem Float
  shippingFeePerKg             Float
  shippingFeeFixed             Float
  deliveryTimeMin              Int
  deliveryTimeMax              Int
  returnPolicy                 String

  countryId String
  country   Country @relation("CountryShippingRates", fields: [countryId], references: [id])

  storeId String
  store   Store  @relation("StoreShippingRates", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([countryId])
  @@index([storeId])
}

model FreeShipping {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation("ProductFreeShipping", fields: [productId], references: [id], onDelete: Cascade)

  eligibaleCountries FreeShippingCountry[] @relation("FreeShippingCountries")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model FreeShippingCountry {
  id String @id @default(uuid())

  freeShippingId String
  freeShipping   FreeShipping @relation("FreeShippingCountries", fields: [freeShippingId], references: [id], onDelete: Cascade)

  countryId String
  country   Country @relation("FreeShippingToCountry", fields: [countryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([freeShippingId])
  @@index([countryId])
}

model Review {
  id       String @id @default(uuid())
  variant  String
  variantImage String
  review   String
  rating   Float
  color    String
  size     String
  quantity String
  likes    Int    @default(0)

  images ReviewImage[] @relation("ReviewToReviewImage")

  userId String
  user   User   @relation("ReviewToUser", fields: [userId], references: [id])

  productId String
  product   Product @relation("ReviewToProduct", fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([productId])
}


model ReviewImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  reviewId String
  review   Review @relation("ReviewToReviewImage", fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)


  couponId String?
  coupon Coupon? @relation("CouponToCart",fields: [couponId],references: [id])

  cartItems    CartItem[] @relation("CartToCartItem")
  shippingFees Float      @default(0)
  subTotal     Float
  total        Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

model CartItem {
  id          String @id @default(uuid())
  productId   String
  variantId   String
  sizeId      String
  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  price       Float
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  totalPrice  Float

  cartId String
  cart   Cart   @relation("CartToCartItem", fields: [cartId], references: [id], onDelete: Cascade)

  storeId String
  store   Store  @relation("CartItemToStore", fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([storeId])
}

model ShippingAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  address1  String
  address2  String?
  state     String
  city      String
  zip_code  String
  default   Boolean @default(false)

  orders Order[] @relation("ShippingAddressToOrder")

  userId String
  user   User   @relation("UserShippingAddresses", fields: [userId], references: [id])

  countryId String
  country   Country @relation("CountryToShippingAddress", fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryId])
  @@index([userId])
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  OutforDelivery
  Delivered
  Cancelled
  Failed
  Refunded
  Returned
  PartiallyShipped
  OnHold
}

enum PaymentStatus {
  Pending
  Paid
  Failed
  Declined
  Cancelled
  Refunded
  PartiallyRefunded
  Chargeback
}

enum PaymentMethod {
  Paypal
  Stripe
}

model Order {
  id           String @id @default(uuid())
  shippingFees Float
  subTotal     Float
  total        Float

  groups OrderGroup[] @relation("OrderGroupToOrder")

  orderStatus   OrderStatus   @default(Pending)
  paymentStatus PaymentStatus @default(Pending)

  paymentMethod  PaymentMethod?
  paymentDetails PaymentDetails? @relation("PaymentDetailsToOrder")

  shippingAddressId String
  shippingAddress   ShippingAddress @relation("ShippingAddressToOrder", fields: [shippingAddressId], references: [id])

  userId String
  user   User   @relation("UserOrders", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shippingAddressId])
  @@index([userId])
}

model OrderGroup {
  id     String      @id @default(uuid())
  status OrderStatus @default(Pending)

  items OrderItem[] @relation("OrderItemToGroup")

  shippingService     String
  shippingDeliveryMin Int
  shippingDeliveryMax Int

  shippingFees Float
  subTotal     Float
  total        Float

  orderId String
  order   Order  @relation("OrderGroupToOrder", fields: [orderId], references: [id])

  storeId String
  store   Store  @relation("OrderGroupToStore", fields: [storeId], references: [id])


  couponId String?
  coupon   Coupon?  @relation("CouponToOrderGroup", fields: [couponId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([storeId])
  @@index([couponId])
}

enum ProductStatus {
  /// Product has been added to the order but no action taken yet
  Pending

  /// Product is being prepared (picked, packed, or manufactured)
  Processing

  /// Product is packed and ready for shipment
  ReadyForShipment

  /// Product has been shipped
  Shipped

  /// Product has been delivered to the customer
  Delivered

  /// Product order has been canceled
  Canceled

  /// Product has been returned by the customer
  Returned

  /// Product cost has been refunded
  Refunded

  /// Delivery attempt failed, product may return to warehouse
  FailedDelivery

  /// Product is on hold (e.g., stock issues, verification required)
  OnHold

  /// Product is delayed due to stock unavailability
  Backordered

  /// Some units of the product were shipped, but the order is not yet complete
  PartiallyShipped

  /// Customer requested an exchange for the product
  ExchangeRequested

  /// Product is awaiting customer pickup (for pickup orders)
  AwaitingPickup
}

model OrderItem {
  id String @id @default(uuid())

  productId String
  variantId String
  sizeId    String

  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  price       Float
  totalPrice  Float

  orderGroupId String
  orderGroup   OrderGroup @relation("OrderItemToGroup", fields: [orderGroupId], references: [id], onDelete: Cascade)


  status ProductStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderGroupId])
}

model Wishlist {
  id String @id @default(uuid())

  userId String
  user   User   @relation("WishlistToUser", fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation("WishlistToProduct", fields: [productId], references: [id], onDelete: Cascade)

  variantId String
  variant   ProductVariant @relation("WishlistToProductVariant", fields: [variantId], references: [id], onDelete: Cascade)

  sizeId String?
  size   Size?   @relation("WishlistToSize", fields: [sizeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([variantId])
  @@index([sizeId])
}


model Coupon {
  id String @id @default(uuid())
  code String @unique
  startDate String
  endDate String
  discount Int


  storeId String
  store Store @relation("CouponToStore",fields: [storeId],references: [id],onDelete: Cascade) 


  orders OrderGroup[]   @relation("CouponToOrderGroup")
  users User[]  @relation("CouponToUser")


  carts Cart[] @relation("CouponToCart")


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])

}



model PaymentDetails {
  
  id String @id @default(uuid())

  paymentInetntId String
  paymentMethod String
  status String
  amount Float
  currency String


  orderId String @unique
  order Order @relation("PaymentDetailsToOrder",fields: [orderId],references: [id],onDelete: Cascade) 

  userId String
  user User @relation("PaymentDetailsToUser",fields: [userId],references: [id],onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([userId])
}
